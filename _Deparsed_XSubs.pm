#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package B {
sub CLONE;
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub regex_padav;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashoff;
sub stashpv;
sub warnings;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub HSCXT;
sub NAME_HEK;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GPFLAGS;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::INVLIST {
sub array_len;
sub get_invlist_array;
sub is_offset;
sub prev_index;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::METHOP {
sub first;
sub meth_sv;
sub rclass;
}
package B::NV {
sub NV;
sub NVX;
}
package B::OP {
sub desc;
sub flags;
sub folded;
sub moresib;
sub name;
sub next;
sub oplist;
sub opt;
sub parent;
sub ppaddr;
sub private;
sub savefree;
sub sibling;
sub size;
sub slabbed;
sub spare;
sub static;
sub targ;
sub type;
}
package B::PADLIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub NAMES;
sub REFCNT;
sub id;
sub outid;
}
package B::PADNAME {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub FLAGS;
sub LEN;
sub OURSTASH;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
sub PROTOCV;
sub PV;
sub PVX;
sub REFCNT;
sub SvSTASH;
sub TYPE;
}
package B::PADNAMELIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub REFCNT;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub code_list;
sub pmflags;
sub pmoffset;
sub pmregexp;
sub pmreplroot;
sub pmreplstart;
sub pmstash;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub compflags;
sub precomp;
sub qr_anoncv;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package B::UNOP_AUX {
sub aux_list;
sub string;
}
package Carp {
sub _maybe_isa;
sub downgrade;
sub is_utf8;
}
package Clone {
sub clone($;$) ;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Zlib {
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub zlibCompileFlags;
sub zlib_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Config {
sub AUTOLOAD;
}
package Cwd {
sub CLONE;
sub abs_path;
sub fastcwd;
sub getcwd;
sub realpath;
}
package DBD::_::common {
sub DELETE;
sub DESTROY;
sub FETCH;
sub STORE;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub private_data;
sub rows;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
}
package DBD::_::db {
sub connected;
sub preparse;
sub take_imp_data;
}
package DBD::_::dr {
sub dbixs_revision;
}
package DBD::_::st {
sub DESTROY;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub fetch;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub rows;
}
package DBD::_mem::common {
sub DESTROY;
}
package DBI {
sub DBIf_TRACE_CON() ;
sub DBIf_TRACE_DBD() ;
sub DBIf_TRACE_ENC() ;
sub DBIf_TRACE_SQL() ;
sub DBIf_TRACE_TXN() ;
sub DBIpp_cm_XX() ;
sub DBIpp_cm_br() ;
sub DBIpp_cm_cs() ;
sub DBIpp_cm_dd() ;
sub DBIpp_cm_dw() ;
sub DBIpp_cm_hs() ;
sub DBIpp_ph_XX() ;
sub DBIpp_ph_cn() ;
sub DBIpp_ph_cs() ;
sub DBIpp_ph_qm() ;
sub DBIpp_ph_sp() ;
sub DBIpp_st_XX() ;
sub DBIpp_st_bs() ;
sub DBIpp_st_qq() ;
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_CURSOR_DYNAMIC() ;
sub SQL_CURSOR_FORWARD_ONLY() ;
sub SQL_CURSOR_KEYSET_DRIVEN() ;
sub SQL_CURSOR_STATIC() ;
sub SQL_CURSOR_TYPE_DEFAULT() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _clone_dbis;
sub _concat_hash_sorted;
sub _dbi_state_lval;
sub _debug_dispatch;
sub _get_imp_data;
sub _handles;
sub _install_method;
sub _new_handle;
sub _setup_handle;
sub _svdump;
sub constant() ;
sub dbi_profile;
sub dbi_profile_merge;
sub dbi_profile_merge_nodes;
sub dbi_time;
sub dump_handle;
sub hash;
sub looks_like_number;
sub neat;
sub set_err;
sub sql_type_cast;
sub trace;
sub trace_msg;
}
package DBI::common {
sub CLEAR;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FETCH_many;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub can;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub func;
sub parse_trace_flag;
sub parse_trace_flags;
sub private_attribute_info;
sub private_data;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
sub visit_child_handles;
}
package DBI::db {
sub TIEHASH;
sub begin_work;
sub clone;
sub column_info;
sub commit;
sub connected;
sub data_sources;
sub disconnect;
sub do;
sub foreign_key_info;
sub get_info;
sub last_insert_id;
sub ping;
sub prepare;
sub prepare_cached;
sub preparse;
sub primary_key;
sub primary_key_info;
sub quote;
sub quote_identifier;
sub rollback;
sub rows;
sub selectall_array;
sub selectall_arrayref;
sub selectall_hashref;
sub selectcol_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub selectrow_hashref;
sub statistics_info;
sub table_info;
sub tables;
sub take_imp_data;
sub type_info;
sub type_info_all;
}
package DBI::dr {
sub TIEHASH;
sub connect;
sub connect_cached;
sub data_sources;
sub dbixs_revision;
sub default_user;
sub disconnect_all;
}
package DBI::st {
sub TIEHASH;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub bind_columns;
sub bind_param;
sub bind_param_array;
sub bind_param_inout;
sub bind_param_inout_array;
sub blob_copy_to_file;
sub blob_read;
sub cancel;
sub dump_results;
sub execute;
sub execute_array;
sub execute_for_fetch;
sub fetch;
sub fetchall_arrayref;
sub fetchall_hashref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub last_insert_id;
sub more_results;
sub rows;
}
package DBI::var {
sub FETCH;
}
package DB_File {
sub DELETE;
sub DESTROY;
sub DoTie_;
sub EXISTS;
sub FETCH;
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub O_ALIAS() ;
sub O_DEFER() ;
sub O_EXLOCK() ;
sub O_NOINHERIT() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_TEMPORARY() ;
sub POP;
sub PUSH;
sub SHIFT;
sub STORE;
sub UNSHIFT;
sub constant;
sub del;
sub fd;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub get;
sub length;
sub pop;
sub push;
sub put;
sub seq;
sub shift;
sub sync;
sub unshift;
}
package Data::Dumper {
sub Dumpxs($;$$) ;
sub _vstring($) ;
}
package Devel::Peek {
sub CvGV;
sub DeadCode;
sub Dump;
sub DumpArray;
sub DumpProg;
sub SvREFCNT(\[$@%&*]) ;
sub fill_mstats;
sub mstat;
sub mstats2hash($\%;$) ;
sub mstats_fillhash(\%;$) ;
sub runops_debug;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub context;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA {
sub DESTROY($) ;
sub _addfilebin($$) ;
sub _addfileuniv($$) ;
sub _getstate($) ;
sub _putstate($$) ;
sub add($;@) ;
sub algorithm($) ;
sub b64digest($) ;
sub clone($) ;
sub digest($) ;
sub hashsize($) ;
sub hexdigest($) ;
sub hmac_sha1(;@) ;
sub hmac_sha1_base64(;@) ;
sub hmac_sha1_hex(;@) ;
sub hmac_sha224(;@) ;
sub hmac_sha224_base64(;@) ;
sub hmac_sha224_hex(;@) ;
sub hmac_sha256(;@) ;
sub hmac_sha256_base64(;@) ;
sub hmac_sha256_hex(;@) ;
sub hmac_sha384(;@) ;
sub hmac_sha384_base64(;@) ;
sub hmac_sha384_hex(;@) ;
sub hmac_sha512(;@) ;
sub hmac_sha512224(;@) ;
sub hmac_sha512224_base64(;@) ;
sub hmac_sha512224_hex(;@) ;
sub hmac_sha512256(;@) ;
sub hmac_sha512256_base64(;@) ;
sub hmac_sha512256_hex(;@) ;
sub hmac_sha512_base64(;@) ;
sub hmac_sha512_hex(;@) ;
sub newSHA($$) ;
sub sha1(;@) ;
sub sha1_base64(;@) ;
sub sha1_hex(;@) ;
sub sha224(;@) ;
sub sha224_base64(;@) ;
sub sha224_hex(;@) ;
sub sha256(;@) ;
sub sha256_base64(;@) ;
sub sha256_hex(;@) ;
sub sha384(;@) ;
sub sha384_base64(;@) ;
sub sha384_hex(;@) ;
sub sha512(;@) ;
sub sha512224(;@) ;
sub sha512224_base64(;@) ;
sub sha512224_hex(;@) ;
sub sha512256(;@) ;
sub sha512256_base64(;@) ;
sub sha512256_hex(;@) ;
sub sha512_base64(;@) ;
sub sha512_hex(;@) ;
sub shainit($$) ;
sub sharewind($) ;
sub shawrite($$$) ;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub CLONE;
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package Encode {
sub _utf8_off($) ;
sub _utf8_on($) ;
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub from_to($$$;$) ;
sub is_utf8($;$) ;
sub onBOOT() ;
sub str2bytes($$;$) ;
}
package Encode::Byte {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::CN {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::EBCDIC {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::JP {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::KR {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::Symbol {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::TW {
sub bytes2str($$;$) ;
sub decode($$;$) ;
sub decode_utf8($;$) ;
sub encode($$;$) ;
sub encode_utf8($) ;
sub str2bytes($$;$) ;
}
package Encode::Unicode {
sub decode;
sub encode;
}
package Encode::XS {
sub cat_decode;
sub decode;
sub encode;
sub mime_name;
sub name;
sub needs_lines;
sub perlio_ok;
sub renew;
sub renewed;
}
package Encode::utf8 {
sub decode;
sub encode;
}
package Fcntl {
sub AUTOLOAD;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SHARE() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub O_ALIAS() ;
sub O_ALT_IO() ;
sub O_DEFER() ;
sub O_EVTONLY() ;
sub O_EXLOCK() ;
sub O_IGNORE_CTTY() ;
sub O_NOINHERIT() ;
sub O_NOLINK() ;
sub O_NOSIGPIPE() ;
sub O_NOTRANS() ;
sub O_RANDOM() ;
sub O_RAW() ;
sub O_RSRC() ;
sub O_SEQUENTIAL() ;
sub O_SHLOCK() ;
sub O_SYMLINK() ;
sub O_TEMPORARY() ;
sub O_TTY_INIT() ;
sub S_ENFMT() ;
sub S_IFMT;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
}
package File::DosGlob {
sub _callsite;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub CLONE;
sub GLOB_ERROR;
sub bsd_glob;
sub bsd_glob_override;
sub csh_glob;
}
package File::Spec::Unix {
sub _fn_canonpath;
sub _fn_catdir;
sub _fn_catfile;
sub canonpath;
sub catdir;
sub catfile;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package GDBM_File {
sub AUTOLOAD;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub GDBM_version;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub UNTIE;
sub block_size;
sub cache_size;
sub centfree;
sub clear_error;
sub close;
sub coalesce;
sub convert;
sub count;
sub crash_tolerance_status;
sub dbname;
sub dump;
sub errno;
sub failure_atomic;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub flags;
sub gdbm_check_syserr;
sub latest_snapshot;
sub load;
sub mmap;
sub mmapsize;
sub needs_recovery;
sub recover;
sub reorganize;
sub setopt;
sub strerror;
sub sync;
sub sync_mode;
sub syserrno;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::StoredIterator {
sub hash_get_iterator;
sub hash_init_iterator;
sub hash_set_iterator;
}
package Hash::Util {
sub _clear_placeholders(\%) ;
sub all_keys(\%\@\@) ;
sub bucket_array;
sub bucket_info;
sub bucket_ratio(\%) ;
sub hash_seed() ;
sub hash_traversal_mask;
sub hash_value($;$) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub num_buckets(\%) ;
sub used_buckets(\%) ;
}
package Hash::Util::FieldHash {
sub CLONE;
sub _active_fields;
sub _fieldhash($$) ;
sub _test_uvar_get;
sub _test_uvar_same;
sub _test_uvar_set;
sub id($) ;
sub id_2obj($) ;
sub register($@) ;
}
package I18N::Langinfo {
sub AUTOLOAD;
sub langinfo(_) ;
}
package IO::File {
sub new_tmpfile;
}
package IO::Handle {
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub getline;
sub getlines;
sub gets;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub sockatmark($) ;
}
package IPC::Msg::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::Semaphore::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::SharedMem::stat {
sub pack($) ;
sub unpack($$) ;
}
package IPC::SysV {
sub _constant($) ;
sub ftok($;$) ;
sub memread($$$$) ;
sub memwrite($$$$) ;
sub shmat($$$) ;
sub shmdt($) ;
}
package Image::Magick::Q16HDRI {
sub AcquireImagePixels($;@) ;
sub AdaptiveBlur($;@) ;
sub AdaptiveBlurImage($;@) ;
sub AdaptiveResize($;@) ;
sub AdaptiveResizeImage($;@) ;
sub AdaptiveSharpen($;@) ;
sub AdaptiveSharpenImage($;@) ;
sub AdaptiveThreshold($;@) ;
sub AdaptiveThresholdImage($;@) ;
sub AddNoise($;@) ;
sub AddNoiseImage($;@) ;
sub AffineTransform($;@) ;
sub AffineTransformImage($;@) ;
sub Animate($;@) ;
sub AnimateImage($;@) ;
sub Annotate($;@) ;
sub AnnotateImage($;@) ;
sub Append($;@) ;
sub AppendImage($;@) ;
sub AutoGamma($;@) ;
sub AutoGammaImage($;@) ;
sub AutoLevel($;@) ;
sub AutoLevelImage($;@) ;
sub AutoOrient($;@) ;
sub AutoOrientImage($;@) ;
sub AutoThreshold($;@) ;
sub AutoThresholdImage($;@) ;
sub Average($) ;
sub AverageImage($) ;
sub BilateralBlur($;@) ;
sub BilateralBlurImage($;@) ;
sub BlackThreshold($;@) ;
sub BlackThresholdImage($;@) ;
sub BlobToImage($;@) ;
sub BlueShift($;@) ;
sub BlueShiftImage($;@) ;
sub Blur($;@) ;
sub BlurImage($;@) ;
sub Border($;@) ;
sub BorderImage($;@) ;
sub BrightnessContrast($;@) ;
sub BrightnessContrastImage($;@) ;
sub CLAHE($;@) ;
sub CLAHEImage($;@) ;
sub CLONE($;@) ;
sub CannyEdge($;@) ;
sub CannyEdgeImage($;@) ;
sub Channel($;@) ;
sub ChannelFx($;@) ;
sub ChannelFxImage($;@) ;
sub ChannelImage($;@) ;
sub Charcoal($;@) ;
sub CharcoalImage($;@) ;
sub Chop($;@) ;
sub ChopImage($;@) ;
sub Clamp($;@) ;
sub ClampImage($;@) ;
sub Clip($;@) ;
sub ClipImage($;@) ;
sub ClipMask($;@) ;
sub ClipMaskImage($;@) ;
sub Clone($) ;
sub CloneImage($) ;
sub Clut($;@) ;
sub ClutImage($;@) ;
sub Coalesce($) ;
sub CoalesceImage($) ;
sub Color($;@) ;
sub ColorDecisionList($;@) ;
sub ColorDecisionListImage($;@) ;
sub ColorFloodfill($;@) ;
sub ColorFloodfillImage($;@) ;
sub ColorImage($;@) ;
sub ColorMatrix($;@) ;
sub ColorMatrixImage($;@) ;
sub ColorThreshold($;@) ;
sub ColorThresholdImage($;@) ;
sub Colorize($;@) ;
sub ColorizeImage($;@) ;
sub Colorspace($;@) ;
sub ColorspaceImage($;@) ;
sub Comment($;@) ;
sub CommentImage($;@) ;
sub Compare($;@) ;
sub CompareImages($;@) ;
sub CompareImagesLayers($;@) ;
sub CompareLayers($;@) ;
sub ComplexImages($;@) ;
sub Composite($;@) ;
sub CompositeImage($;@) ;
sub ConnectedComponents($;@) ;
sub ConnectedComponentsImage($;@) ;
sub Contrast($;@) ;
sub ContrastImage($;@) ;
sub ContrastStretch($;@) ;
sub ContrastStretchImage($;@) ;
sub Convolve($;@) ;
sub ConvolveImage($;@) ;
sub CopyImage($) ;
sub CopyImagePixels($;@) ;
sub CopyPixels($;@) ;
sub Crop($;@) ;
sub CropImage($;@) ;
sub CycleColormap($;@) ;
sub CycleColormapImage($;@) ;
sub DESTROY($) ;
sub Decipher($;@) ;
sub DecipherImage($;@) ;
sub Deconstruct($;@) ;
sub DeconstructImage($;@) ;
sub Describe($;@) ;
sub DescribeImage($;@) ;
sub Deskew($;@) ;
sub DeskewImage($;@) ;
sub Despeckle($;@) ;
sub DespeckleImage($;@) ;
sub Difference($;@) ;
sub DifferenceImage($;@) ;
sub Display($;@) ;
sub DisplayImage($;@) ;
sub Distort($;@) ;
sub DistortImage($;@) ;
sub Draw($;@) ;
sub DrawImage($;@) ;
sub Edge($;@) ;
sub EdgeImage($;@) ;
sub Emboss($;@) ;
sub EmbossImage($;@) ;
sub Encipher($;@) ;
sub EncipherImage($;@) ;
sub Enhance($;@) ;
sub EnhanceImage($;@) ;
sub Equalize($;@) ;
sub EqualizeImage($;@) ;
sub Evaluate($;@) ;
sub EvaluateImage($;@) ;
sub EvaluateImages($;@) ;
sub Extent($;@) ;
sub ExtentImage($;@) ;
sub Features($;@) ;
sub FeaturesImage($;@) ;
sub Flatten($;@) ;
sub FlattenImage($;@) ;
sub Flip($;@) ;
sub FlipImage($;@) ;
sub FloodfillPaint($;@) ;
sub FloodfillPaintImage($;@) ;
sub Flop($;@) ;
sub FlopImage($;@) ;
sub ForwardFourierTransform($;@) ;
sub ForwardFourierTransformImage($;@) ;
sub Frame($;@) ;
sub FrameImage($;@) ;
sub Function($;@) ;
sub FunctionImage($;@) ;
sub Fx($;@) ;
sub FxImage($;@) ;
sub Gamma($;@) ;
sub GammaImage($;@) ;
sub GaussianBlur($;@) ;
sub GaussianBlurImage($;@) ;
sub Get($;@) ;
sub GetAttribute($;@) ;
sub GetAttributes($;@) ;
sub GetAuthenticMetacontent($;@) ;
sub GetAuthenticPixels($;@) ;
sub GetImagePixels($;@) ;
sub GetMetacontent($;@) ;
sub GetPixel($;@) ;
sub GetPixels($;@) ;
sub GetVirtualMetacontent($;@) ;
sub GetVirtualPixels($;@) ;
sub Grayscale($;@) ;
sub GrayscaleImage($;@) ;
sub HaldClut($;@) ;
sub HaldClutImage($;@) ;
sub Histogram($;@) ;
sub HistogramImage($;@) ;
sub HoughLine($;@) ;
sub HoughLineImage($;@) ;
sub Identify($;@) ;
sub IdentifyImage($;@) ;
sub ImageToBlob($;@) ;
sub Implode($;@) ;
sub ImplodeImage($;@) ;
sub Integral($;@) ;
sub IntegralImage($;@) ;
sub InverseFourierTransform($;@) ;
sub InverseFourierTransformImage($;@) ;
sub KMeansImage($;@) ;
sub Kmeans($;@) ;
sub Kuwahara($;@) ;
sub KuwaharaImage($;@) ;
sub Label($;@) ;
sub LabelImage($;@) ;
sub Layers($;@) ;
sub Level($;@) ;
sub LevelColors($;@) ;
sub LevelImage($;@) ;
sub LevelImageColors($;@) ;
sub LinearStretch($;@) ;
sub LinearStretchImage($;@) ;
sub LiquidRescale($;@) ;
sub LiquidRescaleImage($;@) ;
sub MagickToMime($$) ;
sub Magnify($;@) ;
sub MagnifyImage($;@) ;
sub Map($;@) ;
sub MapImage($;@) ;
sub Mask($;@) ;
sub MaskImage($;@) ;
sub MatteFloodfill($;@) ;
sub MatteFloodfillImage($;@) ;
sub MeanShift($;@) ;
sub MeanShiftImage($;@) ;
sub MedianConvolveImage($;@) ;
sub MedianFilter($;@) ;
sub Minify($;@) ;
sub MinifyImage($;@) ;
sub Mode($;@) ;
sub ModeImage($;@) ;
sub Modulate($;@) ;
sub ModulateImage($;@) ;
sub Mogrify($;@) ;
sub MogrifyRegion($;@) ;
sub Montage($;@) ;
sub MontageImage($;@) ;
sub Morph($;@) ;
sub MorphImage($;@) ;
sub Morphology($;@) ;
sub MorphologyImage($;@) ;
sub Mosaic($) ;
sub MosaicImage($) ;
sub MotionBlur($;@) ;
sub MotionBlurImage($;@) ;
sub Negate($;@) ;
sub NegateImage($;@) ;
sub Normalize($;@) ;
sub NormalizeImage($;@) ;
sub NumberColors($;@) ;
sub NumberColorsImage($;@) ;
sub OilPaint($;@) ;
sub OilPaintImage($;@) ;
sub Opaque($;@) ;
sub OpaqueImage($;@) ;
sub OptimizeImageLayers($;@) ;
sub OrderedDither($;@) ;
sub OrderedDitherImage($;@) ;
sub Perceptible($;@) ;
sub PerceptibleImage($;@) ;
sub PerceptualHash($) ;
sub PerceptualHashImage($) ;
sub Ping($;@) ;
sub PingImage($;@) ;
sub Polaroid($;@) ;
sub PolaroidImage($;@) ;
sub Poly($;@) ;
sub PolyImage($;@) ;
sub Posterize($;@) ;
sub PosterizeImage($;@) ;
sub Preview($;@) ;
sub PreviewImage($;@) ;
sub Profile($;@) ;
sub ProfileImage($;@) ;
sub Quantize($;@) ;
sub QuantizeImage($;@) ;
sub QueryColor($;@) ;
sub QueryColorname($;@) ;
sub QueryFont($;@) ;
sub QueryFontMetrics($;@) ;
sub QueryFormat($;@) ;
sub QueryMultilineFontMetrics($;@) ;
sub QueryOption($;@) ;
sub Raise($;@) ;
sub RaiseImage($;@) ;
sub RangeThreshold($;@) ;
sub RangeThresholdImage($;@) ;
sub Read($;@) ;
sub ReadImage($;@) ;
sub ReduceNoise($;@) ;
sub ReduceNoiseImage($;@) ;
sub Remap($;@) ;
sub RemapImage($;@) ;
sub Remote($;@) ;
sub RemoteCommand($;@) ;
sub Resample($;@) ;
sub ResampleImage($;@) ;
sub Resize($;@) ;
sub ResizeImage($;@) ;
sub Roll($;@) ;
sub RollImage($;@) ;
sub Rotate($;@) ;
sub RotateImage($;@) ;
sub RotationalBlur($;@) ;
sub RotationalBlurImage($;@) ;
sub Sample($;@) ;
sub SampleImage($;@) ;
sub Sans0($;@) ;
sub Sans0Image($;@) ;
sub Sans1($;@) ;
sub Sans1Image($;@) ;
sub Scale($;@) ;
sub ScaleImage($;@) ;
sub Segment($;@) ;
sub SegmentImage($;@) ;
sub SelectiveBlur($;@) ;
sub SelectiveBlurImage($;@) ;
sub Separate($;@) ;
sub SeparateImage($;@) ;
sub SepiaTone($;@) ;
sub SepiaToneImage($;@) ;
sub Set($;@) ;
sub SetAttribute($;@) ;
sub SetAttributes($;@) ;
sub SetPixel($;@) ;
sub SetPixels($;@) ;
sub Shade($;@) ;
sub ShadeImage($;@) ;
sub Shadow($;@) ;
sub ShadowImage($;@) ;
sub Sharpen($;@) ;
sub SharpenImage($;@) ;
sub Shave($;@) ;
sub ShaveImage($;@) ;
sub Shear($;@) ;
sub ShearImage($;@) ;
sub SigmoidalContrast($;@) ;
sub SigmoidalContrastImage($;@) ;
sub Signature($;@) ;
sub SignatureImage($;@) ;
sub Sketch($;@) ;
sub SketchImage($;@) ;
sub Smush($;@) ;
sub SmushImage($;@) ;
sub Solarize($;@) ;
sub SolarizeImage($;@) ;
sub SortPixels($;@) ;
sub SortPixelsImage($;@) ;
sub SparseColor($;@) ;
sub SparseColorImage($;@) ;
sub Splice($;@) ;
sub SpliceImage($;@) ;
sub Spread($;@) ;
sub SpreadImage($;@) ;
sub Statistic($;@) ;
sub StatisticImage($;@) ;
sub Statistics($) ;
sub StatisticsImage($) ;
sub Stegano($;@) ;
sub SteganoImage($;@) ;
sub Stereo($;@) ;
sub StereoImage($;@) ;
sub Strip($;@) ;
sub StripImage($;@) ;
sub Swirl($;@) ;
sub SwirlImage($;@) ;
sub Sync($;@) ;
sub SyncAuthenticPixels($;@) ;
sub SyncImage($;@) ;
sub SyncImagePixels($;@) ;
sub Syncauthenticpixels($;@) ;
sub Texture($;@) ;
sub TextureImage($;@) ;
sub Threshold($;@) ;
sub ThresholdImage($;@) ;
sub Thumbnail($;@) ;
sub ThumbnailImage($;@) ;
sub Tint($;@) ;
sub TintImage($;@) ;
sub Transparent($;@) ;
sub TransparentImage($;@) ;
sub Transpose($;@) ;
sub TransposeImage($;@) ;
sub Transverse($;@) ;
sub TransverseImage($;@) ;
sub Trim($;@) ;
sub TrimImage($;@) ;
sub UNLOAD() ;
sub UniqueColors($;@) ;
sub UniqueColorsImage($;@) ;
sub UnsharpMask($;@) ;
sub UnsharpMaskImage($;@) ;
sub Vignette($;@) ;
sub VignetteImage($;@) ;
sub Wave($;@) ;
sub WaveImage($;@) ;
sub WaveletDenoise($;@) ;
sub WaveletDenoiseImage($;@) ;
sub WhiteBalance($;@) ;
sub WhiteBalanceImage($;@) ;
sub WhiteThreshold($;@) ;
sub WhiteThresholdImage($;@) ;
sub Write($;@) ;
sub WriteImage($;@) ;
sub Zoom($;@) ;
sub ZoomImage($;@) ;
sub acquireimagepixels($;@) ;
sub animate($;@) ;
sub animateimage($;@) ;
sub append($;@) ;
sub appendimage($;@) ;
sub average($) ;
sub averageimage($) ;
sub blob($;@) ;
sub blobto($;@) ;
sub blobtoimage($;@) ;
sub channelfx($;@) ;
sub channelfximage($;@) ;
sub clone($) ;
sub cloneimage($) ;
sub coalesce($) ;
sub coalesceimage($) ;
sub compare($;@) ;
sub compareimage($;@) ;
sub compareimagelayers($;@) ;
sub comparelayers($;@) ;
sub compleximages($;@) ;
sub constant($$) ;
sub copy($) ;
sub copyimage($) ;
sub display($;@) ;
sub displayimage($;@) ;
sub evaluateimages($;@) ;
sub features($;@) ;
sub featuresimage($;@) ;
sub flatten($;@) ;
sub flattenimage($;@) ;
sub fx($;@) ;
sub fximage($;@) ;
sub get($;@) ;
sub getPixel($;@) ;
sub getPixels($;@) ;
sub getattribute($;@) ;
sub getattributes($;@) ;
sub getauthenticmetacontent($;@) ;
sub getauthenticpixels($;@) ;
sub getimagepixels($;@) ;
sub getmetacontent($;@) ;
sub getpixel($;@) ;
sub getpixels($;@) ;
sub getvirtualmetacontent($;@) ;
sub getvirtualpixels($;@) ;
sub histogram($;@) ;
sub histogramimage($;@) ;
sub imagetoblob($;@) ;
sub layers($;@) ;
sub magicktomime($$) ;
sub montage($;@) ;
sub montageimage($;@) ;
sub morph($;@) ;
sub morphimage($;@) ;
sub mosaic($) ;
sub mosaicimage($) ;
sub optimizeimagelayers($;@) ;
sub optimizelayers($;@) ;
sub perceptualhash($) ;
sub perceptualhashimage($) ;
sub ping($;@) ;
sub pingimage($;@) ;
sub preview($;@) ;
sub previewimage($;@) ;
sub querycolor($;@) ;
sub querycolorname($;@) ;
sub queryfont($;@) ;
sub queryfontmetrics($;@) ;
sub queryformat($;@) ;
sub querymultilinefontmetrics($;@) ;
sub queryoption($;@) ;
sub read($;@) ;
sub readimage($;@) ;
sub remote($;@) ;
sub remoteCommand($;@) ;
sub set($;@) ;
sub setPixel($;@) ;
sub setPixels($;@) ;
sub setattribute($;@) ;
sub setattributes($;@) ;
sub setpixel($;@) ;
sub setpixels($;@) ;
sub smush($;@) ;
sub smushimage($;@) ;
sub statistics($) ;
sub statisticsimage($) ;
sub syncimagepixels($;@) ;
sub toblob($;@) ;
sub write($;@) ;
sub writeimage($;@) ;
}
package Internals {
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub hv_clear_placeholders(\%) ;
}
package JSON::XS {
sub CLONE;
sub DESTROY;
sub allow_blessed;
sub allow_nonref;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub boolean_values;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_boolean_values;
sub get_canonical;
sub get_convert_blessed;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub space_after;
sub space_before;
sub utf8;
}
package LibAppArmor {
sub _aa_is_blacklisted;
sub aa_change_hat;
sub aa_change_hat_vargs;
sub aa_change_hatv;
sub aa_change_onexec;
sub aa_change_profile;
sub aa_find_mountpoint;
sub aa_getcon;
sub aa_getpeercon;
sub aa_getpeercon_raw;
sub aa_getprocattr;
sub aa_getprocattr_raw;
sub aa_gettaskcon;
sub aa_is_enabled;
sub aa_query_file_path;
sub aa_query_file_path_len;
sub aa_query_label;
sub aa_query_link_path;
sub aa_query_link_path_len;
sub aa_splitcon;
sub aa_stack_onexec;
sub aa_stack_profile;
sub free_record;
sub parse_record;
}
package LibAppArmor::aa_log_record {
sub swig_active_hat_get;
sub swig_active_hat_set;
sub swig_attribute_get;
sub swig_attribute_set;
sub swig_audit_id_get;
sub swig_audit_id_set;
sub swig_audit_sub_id_get;
sub swig_audit_sub_id_set;
sub swig_bitmask_get;
sub swig_bitmask_set;
sub swig_comm_get;
sub swig_comm_set;
sub swig_dbus_bus_get;
sub swig_dbus_bus_set;
sub swig_dbus_interface_get;
sub swig_dbus_interface_set;
sub swig_dbus_member_get;
sub swig_dbus_member_set;
sub swig_dbus_path_get;
sub swig_dbus_path_set;
sub swig_denied_mask_get;
sub swig_denied_mask_set;
sub swig_epoch_get;
sub swig_epoch_set;
sub swig_error_code_get;
sub swig_error_code_set;
sub swig_event_get;
sub swig_event_set;
sub swig_flags_get;
sub swig_flags_set;
sub swig_fs_type_get;
sub swig_fs_type_set;
sub swig_fsuid_get;
sub swig_fsuid_set;
sub swig_info_get;
sub swig_info_set;
sub swig_magic_token_get;
sub swig_magic_token_set;
sub swig_name2_get;
sub swig_name2_set;
sub swig_name_get;
sub swig_name_set;
sub swig_namespace_get;
sub swig_namespace_set;
sub swig_net_family_get;
sub swig_net_family_set;
sub swig_net_foreign_addr_get;
sub swig_net_foreign_addr_set;
sub swig_net_foreign_port_get;
sub swig_net_foreign_port_set;
sub swig_net_local_addr_get;
sub swig_net_local_addr_set;
sub swig_net_local_port_get;
sub swig_net_local_port_set;
sub swig_net_protocol_get;
sub swig_net_protocol_set;
sub swig_net_sock_type_get;
sub swig_net_sock_type_set;
sub swig_operation_get;
sub swig_operation_set;
sub swig_ouid_get;
sub swig_ouid_set;
sub swig_parent_get;
sub swig_parent_set;
sub swig_peer_get;
sub swig_peer_info_get;
sub swig_peer_info_set;
sub swig_peer_pid_get;
sub swig_peer_pid_set;
sub swig_peer_profile_get;
sub swig_peer_profile_set;
sub swig_peer_set;
sub swig_pid_get;
sub swig_pid_set;
sub swig_profile_get;
sub swig_profile_set;
sub swig_requested_mask_get;
sub swig_requested_mask_set;
sub swig_signal_get;
sub swig_signal_set;
sub swig_src_name_get;
sub swig_src_name_set;
sub swig_task_get;
sub swig_task_set;
sub swig_version_get;
sub swig_version_set;
}
package LibAppArmorc {
sub _aa_is_blacklisted;
sub aa_change_hat;
sub aa_change_hat_vargs;
sub aa_change_hatv;
sub aa_change_onexec;
sub aa_change_profile;
sub aa_find_mountpoint;
sub aa_getcon;
sub aa_getpeercon;
sub aa_getpeercon_raw;
sub aa_getprocattr;
sub aa_getprocattr_raw;
sub aa_gettaskcon;
sub aa_is_enabled;
sub aa_log_record_active_hat_get;
sub aa_log_record_active_hat_set;
sub aa_log_record_attribute_get;
sub aa_log_record_attribute_set;
sub aa_log_record_audit_id_get;
sub aa_log_record_audit_id_set;
sub aa_log_record_audit_sub_id_get;
sub aa_log_record_audit_sub_id_set;
sub aa_log_record_bitmask_get;
sub aa_log_record_bitmask_set;
sub aa_log_record_comm_get;
sub aa_log_record_comm_set;
sub aa_log_record_dbus_bus_get;
sub aa_log_record_dbus_bus_set;
sub aa_log_record_dbus_interface_get;
sub aa_log_record_dbus_interface_set;
sub aa_log_record_dbus_member_get;
sub aa_log_record_dbus_member_set;
sub aa_log_record_dbus_path_get;
sub aa_log_record_dbus_path_set;
sub aa_log_record_denied_mask_get;
sub aa_log_record_denied_mask_set;
sub aa_log_record_epoch_get;
sub aa_log_record_epoch_set;
sub aa_log_record_error_code_get;
sub aa_log_record_error_code_set;
sub aa_log_record_event_get;
sub aa_log_record_event_set;
sub aa_log_record_flags_get;
sub aa_log_record_flags_set;
sub aa_log_record_fs_type_get;
sub aa_log_record_fs_type_set;
sub aa_log_record_fsuid_get;
sub aa_log_record_fsuid_set;
sub aa_log_record_info_get;
sub aa_log_record_info_set;
sub aa_log_record_magic_token_get;
sub aa_log_record_magic_token_set;
sub aa_log_record_name2_get;
sub aa_log_record_name2_set;
sub aa_log_record_name_get;
sub aa_log_record_name_set;
sub aa_log_record_namespace_get;
sub aa_log_record_namespace_set;
sub aa_log_record_net_family_get;
sub aa_log_record_net_family_set;
sub aa_log_record_net_foreign_addr_get;
sub aa_log_record_net_foreign_addr_set;
sub aa_log_record_net_foreign_port_get;
sub aa_log_record_net_foreign_port_set;
sub aa_log_record_net_local_addr_get;
sub aa_log_record_net_local_addr_set;
sub aa_log_record_net_local_port_get;
sub aa_log_record_net_local_port_set;
sub aa_log_record_net_protocol_get;
sub aa_log_record_net_protocol_set;
sub aa_log_record_net_sock_type_get;
sub aa_log_record_net_sock_type_set;
sub aa_log_record_operation_get;
sub aa_log_record_operation_set;
sub aa_log_record_ouid_get;
sub aa_log_record_ouid_set;
sub aa_log_record_parent_get;
sub aa_log_record_parent_set;
sub aa_log_record_peer_get;
sub aa_log_record_peer_info_get;
sub aa_log_record_peer_info_set;
sub aa_log_record_peer_pid_get;
sub aa_log_record_peer_pid_set;
sub aa_log_record_peer_profile_get;
sub aa_log_record_peer_profile_set;
sub aa_log_record_peer_set;
sub aa_log_record_pid_get;
sub aa_log_record_pid_set;
sub aa_log_record_profile_get;
sub aa_log_record_profile_set;
sub aa_log_record_requested_mask_get;
sub aa_log_record_requested_mask_set;
sub aa_log_record_signal_get;
sub aa_log_record_signal_set;
sub aa_log_record_src_name_get;
sub aa_log_record_src_name_set;
sub aa_log_record_task_get;
sub aa_log_record_task_set;
sub aa_log_record_version_get;
sub aa_log_record_version_set;
sub aa_query_file_path;
sub aa_query_file_path_len;
sub aa_query_label;
sub aa_query_link_path;
sub aa_query_link_path_len;
sub aa_splitcon;
sub aa_stack_onexec;
sub aa_stack_profile;
sub delete_aa_log_record;
sub free_record;
sub new_aa_log_record;
sub parse_record;
}
package List::Util {
sub all(&@) ;
sub any(&@) ;
sub first(&@) ;
sub head($@) ;
sub max(@) ;
sub maxstr(@) ;
sub mesh;
sub mesh_longest;
sub mesh_shortest;
sub min(@) ;
sub minstr(@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairfirst(&@) ;
sub pairgrep(&@) ;
sub pairkeys(@) ;
sub pairmap(&@) ;
sub pairs(@) ;
sub pairvalues(@) ;
sub product(@) ;
sub reduce(&@) ;
sub reductions(&@) ;
sub sample($@) ;
sub shuffle(@) ;
sub sum(@) ;
sub sum0(@) ;
sub tail($@) ;
sub uniq(@) ;
sub uniqint(@) ;
sub uniqnum(@) ;
sub uniqstr(@) ;
sub unpairs(@) ;
sub zip;
sub zip_longest;
sub zip_shortest;
}
package MIME::Base64 {
sub decode($) ;
sub decode_base64($) ;
sub decoded_base64_length($) ;
sub encode($;$) ;
sub encode_base64($;$) ;
sub encoded_base64_length($;$) ;
}
package MIME::Charset {
sub is_utf8($;$) ;
}
package MIME::QuotedPrint {
sub decode_qp($) ;
sub encode_qp($;$$) ;
}
package Math::BigInt::FastCalc {
sub __strip_zeros;
sub _acmp;
sub _copy;
sub _dec;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _len;
sub _new;
sub _one;
sub _ten;
sub _two;
sub _zero;
}
package NDBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub clearerr;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Net::Libproxy {
sub proxy_factory_free_proxies;
sub proxy_factory_get_proxies;
sub proxy_factory_new;
}
package Net::Libproxy::ProxyFactoryPtr {
sub DESTROY;
}
package NetSNMP::ASN {
sub constant($) ;
}
package NetSNMP::OID {
sub RECEIVED_MESSAGE;
sub SNMPERR_BAD_ADDRESS;
sub SNMPERR_BAD_LOCPORT;
sub SNMPERR_BAD_SESSION;
sub SNMPERR_GENERR;
sub SNMPERR_TOO_LONG;
sub SNMP_API_SINGLE;
sub SNMP_API_TRADITIONAL;
sub SNMP_DEFAULT_ADDRESS;
sub SNMP_DEFAULT_COMMUNITY_LEN;
sub SNMP_DEFAULT_ENTERPRISE_LENGTH;
sub SNMP_DEFAULT_ERRINDEX;
sub SNMP_DEFAULT_ERRSTAT;
sub SNMP_DEFAULT_PEERNAME;
sub SNMP_DEFAULT_REMPORT;
sub SNMP_DEFAULT_REQID;
sub SNMP_DEFAULT_RETRIES;
sub SNMP_DEFAULT_TIME;
sub SNMP_DEFAULT_TIMEOUT;
sub SNMP_DEFAULT_VERSION;
sub TIMED_OUT;
sub _snmp_oid_compare($$) ;
sub constant($) ;
sub newptr($) ;
}
package NetSNMP::TrapReceiver {
sub constant($) ;
sub register($$) ;
}
package NetSNMP::agent {
sub NETSNMP_DS_AGENT_AGENTX_MASTER;
sub NETSNMP_DS_AGENT_AGENTX_PING_INTERVAL;
sub NETSNMP_DS_AGENT_AGENTX_RETRIES;
sub NETSNMP_DS_AGENT_AGENTX_TIMEOUT;
sub NETSNMP_DS_AGENT_CACHE_TIMEOUT;
sub NETSNMP_DS_AGENT_DISABLE_PERL;
sub NETSNMP_DS_AGENT_DONT_LOG_TCPWRAPPERS_CONNECTS;
sub NETSNMP_DS_AGENT_DONT_RETAIN_NOTIFICATIONS;
sub NETSNMP_DS_AGENT_FLAGS;
sub NETSNMP_DS_AGENT_GROUPID;
sub NETSNMP_DS_AGENT_INTERNAL_SECLEVEL;
sub NETSNMP_DS_AGENT_INTERNAL_SECNAME;
sub NETSNMP_DS_AGENT_INTERNAL_VERSION;
sub NETSNMP_DS_AGENT_LEAVE_PIDFILE;
sub NETSNMP_DS_AGENT_MAX_GETBULKREPEATS;
sub NETSNMP_DS_AGENT_MAX_GETBULKRESPONSES;
sub NETSNMP_DS_AGENT_NO_CACHING;
sub NETSNMP_DS_AGENT_NO_CONNECTION_WARNINGS;
sub NETSNMP_DS_AGENT_NO_ROOT_ACCESS;
sub NETSNMP_DS_AGENT_PERL_INIT_FILE;
sub NETSNMP_DS_AGENT_PORTS;
sub NETSNMP_DS_AGENT_PROGNAME;
sub NETSNMP_DS_AGENT_QUIT_IMMEDIATELY;
sub NETSNMP_DS_AGENT_ROLE;
sub NETSNMP_DS_AGENT_SKIPNFSINHOSTRESOURCES;
sub NETSNMP_DS_AGENT_STRICT_DISMAN;
sub NETSNMP_DS_AGENT_USERID;
sub NETSNMP_DS_AGENT_VERBOSE;
sub NETSNMP_DS_AGENT_X_DIR_PERM;
sub NETSNMP_DS_AGENT_X_SOCKET;
sub NETSNMP_DS_AGENT_X_SOCK_GROUP;
sub NETSNMP_DS_AGENT_X_SOCK_PERM;
sub NETSNMP_DS_AGENT_X_SOCK_USER;
sub NETSNMP_DS_APPLICATION_ID;
sub NETSNMP_DS_LIBRARY_ID;
sub NETSNMP_DS_LIB_16BIT_IDS;
sub NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT;
sub NETSNMP_DS_LIB_ALARM_DONT_USE_SIG;
sub NETSNMP_DS_LIB_APPEND_LOGFILES;
sub NETSNMP_DS_LIB_APPTYPE;
sub NETSNMP_DS_LIB_APPTYPES;
sub NETSNMP_DS_LIB_AUTHLOCALIZEDKEY;
sub NETSNMP_DS_LIB_AUTHMASTERKEY;
sub NETSNMP_DS_LIB_AUTHPASSPHRASE;
sub NETSNMP_DS_LIB_CLIENTRECVBUF;
sub NETSNMP_DS_LIB_CLIENTSENDBUF;
sub NETSNMP_DS_LIB_CLIENT_ADDR;
sub NETSNMP_DS_LIB_CLIENT_ADDR_USES_PORT;
sub NETSNMP_DS_LIB_COMMUNITY;
sub NETSNMP_DS_LIB_CONFIGURATION_DIR;
sub NETSNMP_DS_LIB_CONTEXT;
sub NETSNMP_DS_LIB_DEFAULT_PORT;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE;
sub NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS;
sub NETSNMP_DS_LIB_DONT_CHECK_RANGE;
sub NETSNMP_DS_LIB_DONT_PERSIST_STATE;
sub NETSNMP_DS_LIB_DONT_PRINT_UNITS;
sub NETSNMP_DS_LIB_DONT_READ_CONFIGS;
sub NETSNMP_DS_LIB_DUMP_PACKET;
sub NETSNMP_DS_LIB_ESCAPE_QUOTES;
sub NETSNMP_DS_LIB_EXTENDED_INDEX;
sub NETSNMP_DS_LIB_HAVE_READ_CONFIG;
sub NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG;
sub NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH;
sub NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY;
sub NETSNMP_DS_LIB_KSM_KEYTAB;
sub NETSNMP_DS_LIB_KSM_SERVICE_NAME;
sub NETSNMP_DS_LIB_LOG_TIMESTAMP;
sub NETSNMP_DS_LIB_MIBDIRS;
sub NETSNMP_DS_LIB_MIB_COMMENT_TERM;
sub NETSNMP_DS_LIB_MIB_ERRORS;
sub NETSNMP_DS_LIB_MIB_PARSE_LABEL;
sub NETSNMP_DS_LIB_MIB_REPLACE;
sub NETSNMP_DS_LIB_MIB_WARNINGS;
sub NETSNMP_DS_LIB_NO_DISPLAY_HINT;
sub NETSNMP_DS_LIB_NO_TOKEN_WARNINGS;
sub NETSNMP_DS_LIB_NUMERIC_TIMETICKS;
sub NETSNMP_DS_LIB_OIDPREFIX;
sub NETSNMP_DS_LIB_OIDSUFFIX;
sub NETSNMP_DS_LIB_OID_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_OPTIONALCONFIG;
sub NETSNMP_DS_LIB_PASSPHRASE;
sub NETSNMP_DS_LIB_PERSISTENT_DIR;
sub NETSNMP_DS_LIB_PRINT_BARE_VALUE;
sub NETSNMP_DS_LIB_PRINT_FULL_OID;
sub NETSNMP_DS_LIB_PRINT_HEX_TEXT;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS;
sub NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_PRIVLOCALIZEDKEY;
sub NETSNMP_DS_LIB_PRIVMASTERKEY;
sub NETSNMP_DS_LIB_PRIVPASSPHRASE;
sub NETSNMP_DS_LIB_QUICKE_PRINT;
sub NETSNMP_DS_LIB_QUICK_PRINT;
sub NETSNMP_DS_LIB_RANDOM_ACCESS;
sub NETSNMP_DS_LIB_READ_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_REGEX_ACCESS;
sub NETSNMP_DS_LIB_REVERSE_ENCODE;
sub NETSNMP_DS_LIB_SAVE_MIB_DESCRS;
sub NETSNMP_DS_LIB_SBSM_LOCAL_PWD;
sub NETSNMP_DS_LIB_SECLEVEL;
sub NETSNMP_DS_LIB_SECMODEL;
sub NETSNMP_DS_LIB_SECNAME;
sub NETSNMP_DS_LIB_SERVERRECVBUF;
sub NETSNMP_DS_LIB_SERVERSENDBUF;
sub NETSNMP_DS_LIB_SNMPVERSION;
sub NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_TEMP_FILE_PATTERN;
sub NETSNMP_DS_MAX_IDS;
sub NETSNMP_DS_MAX_SUBIDS;
sub NETSNMP_DS_NOTIF_LOG_CTX;
sub NETSNMP_DS_SMUX_SOCKET;
sub NETSNMP_DS_SNMP_VERSION_1;
sub NETSNMP_DS_SNMP_VERSION_2c;
sub NETSNMP_DS_SNMP_VERSION_3;
sub NETSNMP_DS_TOKEN_ID;
sub __agent_check_and_process(;$) ;
sub _uptime() ;
sub constant($) ;
sub errlog($$) ;
sub init_agent($) ;
sub init_master_agent() ;
sub init_mib() ;
sub init_snmp($) ;
sub netsnmp_ds_get_boolean($$) ;
sub netsnmp_ds_get_int($$) ;
sub netsnmp_ds_get_string($$) ;
sub netsnmp_ds_get_void($$) ;
sub netsnmp_ds_register_config($$$$$) ;
sub netsnmp_ds_register_premib($$$$$) ;
sub netsnmp_ds_set_boolean($$$) ;
sub netsnmp_ds_set_int($$$) ;
sub netsnmp_ds_set_string($$$) ;
sub netsnmp_ds_set_void($$$) ;
sub netsnmp_ds_shutdown() ;
sub netsnmp_ds_toggle_boolean($$) ;
sub shutdown($) ;
sub snmp_enable_stderrlog() ;
}
package NetSNMP::agent::default_store {
sub NETSNMP_DS_AGENT_AGENTX_MASTER;
sub NETSNMP_DS_AGENT_AGENTX_PING_INTERVAL;
sub NETSNMP_DS_AGENT_AGENTX_RETRIES;
sub NETSNMP_DS_AGENT_AGENTX_TIMEOUT;
sub NETSNMP_DS_AGENT_CACHE_TIMEOUT;
sub NETSNMP_DS_AGENT_DISABLE_PERL;
sub NETSNMP_DS_AGENT_DONT_LOG_TCPWRAPPERS_CONNECTS;
sub NETSNMP_DS_AGENT_DONT_RETAIN_NOTIFICATIONS;
sub NETSNMP_DS_AGENT_FLAGS;
sub NETSNMP_DS_AGENT_GROUPID;
sub NETSNMP_DS_AGENT_INTERNAL_SECLEVEL;
sub NETSNMP_DS_AGENT_INTERNAL_SECNAME;
sub NETSNMP_DS_AGENT_INTERNAL_VERSION;
sub NETSNMP_DS_AGENT_LEAVE_PIDFILE;
sub NETSNMP_DS_AGENT_MAX_GETBULKREPEATS;
sub NETSNMP_DS_AGENT_MAX_GETBULKRESPONSES;
sub NETSNMP_DS_AGENT_NO_CACHING;
sub NETSNMP_DS_AGENT_NO_CONNECTION_WARNINGS;
sub NETSNMP_DS_AGENT_NO_ROOT_ACCESS;
sub NETSNMP_DS_AGENT_PERL_INIT_FILE;
sub NETSNMP_DS_AGENT_PORTS;
sub NETSNMP_DS_AGENT_PROGNAME;
sub NETSNMP_DS_AGENT_QUIT_IMMEDIATELY;
sub NETSNMP_DS_AGENT_ROLE;
sub NETSNMP_DS_AGENT_SKIPNFSINHOSTRESOURCES;
sub NETSNMP_DS_AGENT_STRICT_DISMAN;
sub NETSNMP_DS_AGENT_USERID;
sub NETSNMP_DS_AGENT_VERBOSE;
sub NETSNMP_DS_AGENT_X_DIR_PERM;
sub NETSNMP_DS_AGENT_X_SOCKET;
sub NETSNMP_DS_AGENT_X_SOCK_GROUP;
sub NETSNMP_DS_AGENT_X_SOCK_PERM;
sub NETSNMP_DS_AGENT_X_SOCK_USER;
sub NETSNMP_DS_NOTIF_LOG_CTX;
sub NETSNMP_DS_SMUX_SOCKET;
sub constant($) ;
}
package NetSNMP::agent::netsnmp_agent_request_info {
sub getDestIp($) ;
sub getMode($) ;
sub getSourceIp($) ;
sub setMode($$) ;
}
package NetSNMP::agent::netsnmp_handler_registration {
sub DESTROY($) ;
sub new($$$) ;
sub register($) ;
}
package NetSNMP::agent::netsnmp_handler_registrationPtr {
sub getRootOID($) ;
}
package NetSNMP::agent::netsnmp_request_infoPtr {
sub getDelegated($) ;
sub getOID($) ;
sub getOIDptr($) ;
sub getProcessed($) ;
sub getRepeat($) ;
sub getStatus($) ;
sub getType($) ;
sub getValue($) ;
sub next($) ;
sub setDelegated($$) ;
sub setError($$$) ;
sub setOID($$) ;
sub setProcessed($$) ;
sub setRepeat($$) ;
sub setStatus($$) ;
sub setType($$) ;
sub setValue($$$) ;
}
package NetSNMP::default_store {
sub NETSNMP_DS_APPLICATION_ID;
sub NETSNMP_DS_LIBRARY_ID;
sub NETSNMP_DS_LIB_16BIT_IDS;
sub NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT;
sub NETSNMP_DS_LIB_ALARM_DONT_USE_SIG;
sub NETSNMP_DS_LIB_APPEND_LOGFILES;
sub NETSNMP_DS_LIB_APPTYPE;
sub NETSNMP_DS_LIB_APPTYPES;
sub NETSNMP_DS_LIB_AUTHLOCALIZEDKEY;
sub NETSNMP_DS_LIB_AUTHMASTERKEY;
sub NETSNMP_DS_LIB_AUTHPASSPHRASE;
sub NETSNMP_DS_LIB_CLIENTRECVBUF;
sub NETSNMP_DS_LIB_CLIENTSENDBUF;
sub NETSNMP_DS_LIB_CLIENT_ADDR;
sub NETSNMP_DS_LIB_CLIENT_ADDR_USES_PORT;
sub NETSNMP_DS_LIB_COMMUNITY;
sub NETSNMP_DS_LIB_CONFIGURATION_DIR;
sub NETSNMP_DS_LIB_CONTEXT;
sub NETSNMP_DS_LIB_DEFAULT_PORT;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE;
sub NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS;
sub NETSNMP_DS_LIB_DONT_CHECK_RANGE;
sub NETSNMP_DS_LIB_DONT_PERSIST_STATE;
sub NETSNMP_DS_LIB_DONT_PRINT_UNITS;
sub NETSNMP_DS_LIB_DONT_READ_CONFIGS;
sub NETSNMP_DS_LIB_DUMP_PACKET;
sub NETSNMP_DS_LIB_ESCAPE_QUOTES;
sub NETSNMP_DS_LIB_EXTENDED_INDEX;
sub NETSNMP_DS_LIB_HAVE_READ_CONFIG;
sub NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG;
sub NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH;
sub NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY;
sub NETSNMP_DS_LIB_KSM_KEYTAB;
sub NETSNMP_DS_LIB_KSM_SERVICE_NAME;
sub NETSNMP_DS_LIB_LOG_TIMESTAMP;
sub NETSNMP_DS_LIB_MIBDIRS;
sub NETSNMP_DS_LIB_MIB_COMMENT_TERM;
sub NETSNMP_DS_LIB_MIB_ERRORS;
sub NETSNMP_DS_LIB_MIB_PARSE_LABEL;
sub NETSNMP_DS_LIB_MIB_REPLACE;
sub NETSNMP_DS_LIB_MIB_WARNINGS;
sub NETSNMP_DS_LIB_NO_DISPLAY_HINT;
sub NETSNMP_DS_LIB_NO_TOKEN_WARNINGS;
sub NETSNMP_DS_LIB_NUMERIC_TIMETICKS;
sub NETSNMP_DS_LIB_OIDPREFIX;
sub NETSNMP_DS_LIB_OIDSUFFIX;
sub NETSNMP_DS_LIB_OID_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_OPTIONALCONFIG;
sub NETSNMP_DS_LIB_PASSPHRASE;
sub NETSNMP_DS_LIB_PERSISTENT_DIR;
sub NETSNMP_DS_LIB_PRINT_BARE_VALUE;
sub NETSNMP_DS_LIB_PRINT_FULL_OID;
sub NETSNMP_DS_LIB_PRINT_HEX_TEXT;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS;
sub NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_PRIVLOCALIZEDKEY;
sub NETSNMP_DS_LIB_PRIVMASTERKEY;
sub NETSNMP_DS_LIB_PRIVPASSPHRASE;
sub NETSNMP_DS_LIB_QUICKE_PRINT;
sub NETSNMP_DS_LIB_QUICK_PRINT;
sub NETSNMP_DS_LIB_RANDOM_ACCESS;
sub NETSNMP_DS_LIB_READ_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_REGEX_ACCESS;
sub NETSNMP_DS_LIB_REVERSE_ENCODE;
sub NETSNMP_DS_LIB_SAVE_MIB_DESCRS;
sub NETSNMP_DS_LIB_SBSM_LOCAL_PWD;
sub NETSNMP_DS_LIB_SECLEVEL;
sub NETSNMP_DS_LIB_SECMODEL;
sub NETSNMP_DS_LIB_SECNAME;
sub NETSNMP_DS_LIB_SERVERRECVBUF;
sub NETSNMP_DS_LIB_SERVERSENDBUF;
sub NETSNMP_DS_LIB_SNMPVERSION;
sub NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_TEMP_FILE_PATTERN;
sub NETSNMP_DS_MAX_IDS;
sub NETSNMP_DS_MAX_SUBIDS;
sub NETSNMP_DS_SNMP_VERSION_1;
sub NETSNMP_DS_SNMP_VERSION_2c;
sub NETSNMP_DS_SNMP_VERSION_3;
sub NETSNMP_DS_TOKEN_ID;
sub constant($) ;
sub netsnmp_ds_get_boolean($$) ;
sub netsnmp_ds_get_int($$) ;
sub netsnmp_ds_get_string($$) ;
sub netsnmp_ds_get_void($$) ;
sub netsnmp_ds_register_config($$$$$) ;
sub netsnmp_ds_register_premib($$$$$) ;
sub netsnmp_ds_set_boolean($$$) ;
sub netsnmp_ds_set_int($$$) ;
sub netsnmp_ds_set_string($$$) ;
sub netsnmp_ds_set_void($$$) ;
sub netsnmp_ds_shutdown() ;
sub netsnmp_ds_toggle_boolean($$) ;
}
package ODBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Opcode {
sub _safe_call_sv($$$) ;
sub _safe_pkg_prep($) ;
sub define_optag($$) ;
sub deny($;@) ;
sub deny_only($;@) ;
sub empty_opset() ;
sub full_opset() ;
sub invert_opset($) ;
sub opcodes() ;
sub opdesc(;@) ;
sub opmask() ;
sub opmask_add($) ;
sub opset(;@) ;
sub opset_to_ops($;$) ;
sub permit($;@) ;
sub permit_only($;@) ;
sub verify_opset($;$) ;
}
package POSIX {
sub ARG_MAX() ;
sub CHILD_MAX() ;
sub CLK_TCK() ;
sub EOTHER() ;
sub EPROCLIM() ;
sub FLT_ROUNDS() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_tmpnam;
sub OPEN_MAX() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TZNAME_MAX() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub acosh;
sub alarm;
sub asctime;
sub asin;
sub asinh;
sub assert;
sub atan2;
sub atan;
sub atanh;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub cbrt;
sub ceil;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub copysign;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub erf;
sub erfc;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp2;
sub exp;
sub expm1;
sub fabs;
sub fclose;
sub fcntl;
sub fdim;
sub fdopen;
sub fegetround() ;
sub feof;
sub ferror;
sub fesetround;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fma;
sub fmax;
sub fmin;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fpclassify;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpayload;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub hypot;
sub ilogb;
sub isatty;
sub isfinite;
sub isgreater;
sub isgreaterequal;
sub isinf;
sub isless;
sub islessequal;
sub islessgreater;
sub isnan;
sub isnormal;
sub issignaling;
sub isunordered;
sub j0;
sub j1;
sub jn;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub lgamma;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log1p;
sub log2;
sub log;
sub logb;
sub longjmp;
sub lrint;
sub lround;
sub lseek;
sub malloc;
sub mblen;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nan;
sub nearbyint;
sub nextafter;
sub nexttoward;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub pipe;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub remainder;
sub remove;
sub remquo;
sub rename;
sub rewind;
sub rewinddir;
sub rint;
sub rmdir;
sub round;
sub scalbn;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpayload;
sub setpayloadsig;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signbit;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtold;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetpgrp;
sub tgamma;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub trunc;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unlink;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wctomb;
sub write;
sub y0;
sub y1;
sub yn;
}
package POSIX::SigSet {
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package PadWalker {
sub _upcontext;
sub closed_over;
sub peek_my;
sub peek_our;
sub peek_sub;
sub set_closed_over;
sub var_name;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package Regexp {
sub DESTROY() ;
}
package SDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub sdbm_clearerr;
}
package SNMP {
sub NETSNMP_DS_APPLICATION_ID;
sub NETSNMP_DS_LIBRARY_ID;
sub NETSNMP_DS_LIB_16BIT_IDS;
sub NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT;
sub NETSNMP_DS_LIB_ALARM_DONT_USE_SIG;
sub NETSNMP_DS_LIB_APPEND_LOGFILES;
sub NETSNMP_DS_LIB_APPTYPE;
sub NETSNMP_DS_LIB_APPTYPES;
sub NETSNMP_DS_LIB_AUTHLOCALIZEDKEY;
sub NETSNMP_DS_LIB_AUTHMASTERKEY;
sub NETSNMP_DS_LIB_AUTHPASSPHRASE;
sub NETSNMP_DS_LIB_CLIENTRECVBUF;
sub NETSNMP_DS_LIB_CLIENTSENDBUF;
sub NETSNMP_DS_LIB_CLIENT_ADDR;
sub NETSNMP_DS_LIB_CLIENT_ADDR_USES_PORT;
sub NETSNMP_DS_LIB_COMMUNITY;
sub NETSNMP_DS_LIB_CONFIGURATION_DIR;
sub NETSNMP_DS_LIB_CONTEXT;
sub NETSNMP_DS_LIB_DEFAULT_PORT;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD;
sub NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE;
sub NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS;
sub NETSNMP_DS_LIB_DONT_CHECK_RANGE;
sub NETSNMP_DS_LIB_DONT_PERSIST_STATE;
sub NETSNMP_DS_LIB_DONT_PRINT_UNITS;
sub NETSNMP_DS_LIB_DONT_READ_CONFIGS;
sub NETSNMP_DS_LIB_DUMP_PACKET;
sub NETSNMP_DS_LIB_ESCAPE_QUOTES;
sub NETSNMP_DS_LIB_EXTENDED_INDEX;
sub NETSNMP_DS_LIB_HAVE_READ_CONFIG;
sub NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG;
sub NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH;
sub NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY;
sub NETSNMP_DS_LIB_KSM_KEYTAB;
sub NETSNMP_DS_LIB_KSM_SERVICE_NAME;
sub NETSNMP_DS_LIB_LOG_TIMESTAMP;
sub NETSNMP_DS_LIB_MIBDIRS;
sub NETSNMP_DS_LIB_MIB_COMMENT_TERM;
sub NETSNMP_DS_LIB_MIB_ERRORS;
sub NETSNMP_DS_LIB_MIB_PARSE_LABEL;
sub NETSNMP_DS_LIB_MIB_REPLACE;
sub NETSNMP_DS_LIB_MIB_WARNINGS;
sub NETSNMP_DS_LIB_NO_DISPLAY_HINT;
sub NETSNMP_DS_LIB_NO_TOKEN_WARNINGS;
sub NETSNMP_DS_LIB_NUMERIC_TIMETICKS;
sub NETSNMP_DS_LIB_OIDPREFIX;
sub NETSNMP_DS_LIB_OIDSUFFIX;
sub NETSNMP_DS_LIB_OID_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_OPTIONALCONFIG;
sub NETSNMP_DS_LIB_PASSPHRASE;
sub NETSNMP_DS_LIB_PERSISTENT_DIR;
sub NETSNMP_DS_LIB_PRINT_BARE_VALUE;
sub NETSNMP_DS_LIB_PRINT_FULL_OID;
sub NETSNMP_DS_LIB_PRINT_HEX_TEXT;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM;
sub NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS;
sub NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_PRIVLOCALIZEDKEY;
sub NETSNMP_DS_LIB_PRIVMASTERKEY;
sub NETSNMP_DS_LIB_PRIVPASSPHRASE;
sub NETSNMP_DS_LIB_QUICKE_PRINT;
sub NETSNMP_DS_LIB_QUICK_PRINT;
sub NETSNMP_DS_LIB_RANDOM_ACCESS;
sub NETSNMP_DS_LIB_READ_UCD_STYLE_OID;
sub NETSNMP_DS_LIB_REGEX_ACCESS;
sub NETSNMP_DS_LIB_REVERSE_ENCODE;
sub NETSNMP_DS_LIB_SAVE_MIB_DESCRS;
sub NETSNMP_DS_LIB_SBSM_LOCAL_PWD;
sub NETSNMP_DS_LIB_SECLEVEL;
sub NETSNMP_DS_LIB_SECMODEL;
sub NETSNMP_DS_LIB_SECNAME;
sub NETSNMP_DS_LIB_SERVERRECVBUF;
sub NETSNMP_DS_LIB_SERVERSENDBUF;
sub NETSNMP_DS_LIB_SNMPVERSION;
sub NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT;
sub NETSNMP_DS_LIB_TEMP_FILE_PATTERN;
sub NETSNMP_DS_MAX_IDS;
sub NETSNMP_DS_MAX_SUBIDS;
sub NETSNMP_DS_SNMP_VERSION_1;
sub NETSNMP_DS_SNMP_VERSION_2c;
sub NETSNMP_DS_SNMP_VERSION_3;
sub NETSNMP_DS_TOKEN_ID;
sub RECEIVED_MESSAGE;
sub SNMPERR_BAD_ADDRESS;
sub SNMPERR_BAD_LOCPORT;
sub SNMPERR_BAD_SESSION;
sub SNMPERR_GENERR;
sub SNMPERR_TOO_LONG;
sub SNMP_API_SINGLE;
sub SNMP_API_TRADITIONAL;
sub SNMP_DEFAULT_ADDRESS;
sub SNMP_DEFAULT_COMMUNITY_LEN;
sub SNMP_DEFAULT_ENTERPRISE_LENGTH;
sub SNMP_DEFAULT_ERRINDEX;
sub SNMP_DEFAULT_ERRSTAT;
sub SNMP_DEFAULT_PEERNAME;
sub SNMP_DEFAULT_REMPORT;
sub SNMP_DEFAULT_REQID;
sub SNMP_DEFAULT_RETRIES;
sub SNMP_DEFAULT_TIME;
sub SNMP_DEFAULT_TIMEOUT;
sub SNMP_DEFAULT_VERSION;
sub TIMED_OUT;
sub _add_mib_dir;
sub _api_mode;
sub _bulkwalk;
sub _catch;
sub _check_timeout;
sub _debug_internals;
sub _dump_packet;
sub _get;
sub _get_select_info;
sub _get_type;
sub _getbulk;
sub _getenv;
sub _getnext;
sub _inform;
sub _init_mib_internals;
sub _main_loop;
sub _mainloop_finish;
sub _map_enum;
sub _mib_toggle_options;
sub _new_session;
sub _new_tunneled_session;
sub _new_v3_session;
sub _read_mib;
sub _read_module;
sub _read_on_fd;
sub _register_debug_tokens;
sub _set;
sub _set_debugging;
sub _set_replace_newer;
sub _set_save_descriptions;
sub _setenv;
sub _sock_cleanup;
sub _sys_uptime;
sub _translate_obj;
sub _trapV1;
sub _trapV2;
sub _update_session;
sub constant;
sub init_snmp;
sub netsnmp_ds_get_boolean($$) ;
sub netsnmp_ds_get_int($$) ;
sub netsnmp_ds_get_string($$) ;
sub netsnmp_ds_get_void($$) ;
sub netsnmp_ds_register_config($$$$$) ;
sub netsnmp_ds_register_premib($$$$$) ;
sub netsnmp_ds_set_boolean($$$) ;
sub netsnmp_ds_set_int($$$) ;
sub netsnmp_ds_set_string($$$) ;
sub netsnmp_ds_set_void($$$) ;
sub netsnmp_ds_shutdown() ;
sub netsnmp_ds_toggle_boolean($$) ;
}
package SNMP::MIB::NODE {
sub FETCH;
sub TIEHASH;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isdual($) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub openhandle($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub tainted($) ;
sub unweaken($) ;
sub weaken($) ;
}
package SnmpSessionPtr {
sub DESTROY;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CCITT() ;
sub AF_CHAOS() ;
sub AF_CTF() ;
sub AF_DATAKIT() ;
sub AF_DLI() ;
sub AF_ECMA() ;
sub AF_GOSIP() ;
sub AF_HYLINK() ;
sub AF_IMPLINK() ;
sub AF_ISO() ;
sub AF_LAST() ;
sub AF_LAT() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_NS() ;
sub AF_OSI() ;
sub AF_OSINET() ;
sub AF_PUP() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AUTOLOAD;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub LOCAL_CONNWAIT() ;
sub LOCAL_CREDS() ;
sub LOCAL_OCREDS() ;
sub LOCAL_PEEREID() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_EOF() ;
sub MSG_ETAG() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CCITT() ;
sub PF_CHAOS() ;
sub PF_CTF() ;
sub PF_DATAKIT() ;
sub PF_DLI() ;
sub PF_ECMA() ;
sub PF_GOSIP() ;
sub PF_HYLINK() ;
sub PF_IMPLINK() ;
sub PF_ISO() ;
sub PF_LAST() ;
sub PF_LAT() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_NS() ;
sub PF_OSI() ;
sub PF_OSINET() ;
sub PF_PUP() ;
sub PF_USER() ;
sub PF_WAN() ;
sub SCM_CONNECT() ;
sub SCM_CREDS() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_PASSIFNAME() ;
sub SO_PROTOTYPE() ;
sub SO_STATE() ;
sub SO_USELOOPBACK() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_MAXRT() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($;$) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($;$) ;
sub pstore($$) ;
sub stack_depth() ;
sub stack_depth_hash() ;
}
package Sub::Util {
sub set_prototype;
sub set_subname;
sub subname;
}
package Sys::Hostname {
sub ghname;
}
package Sys::Syslog {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CCITT() ;
sub AF_CHAOS() ;
sub AF_CTF() ;
sub AF_DATAKIT() ;
sub AF_DLI() ;
sub AF_ECMA() ;
sub AF_GOSIP() ;
sub AF_HYLINK() ;
sub AF_IMPLINK() ;
sub AF_ISO() ;
sub AF_LAST() ;
sub AF_LAT() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_NS() ;
sub AF_OSI() ;
sub AF_OSINET() ;
sub AF_PUP() ;
sub AF_USER() ;
sub AF_WAN() ;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub LOG_FAC;
sub LOG_MAKEPRI;
sub LOG_MASK;
sub LOG_PRI;
sub LOG_UPTO;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_EOF() ;
sub MSG_ETAG() ;
sub MSG_MAXIOVLEN() ;
sub MSG_MCAST() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CCITT() ;
sub PF_CHAOS() ;
sub PF_CTF() ;
sub PF_DATAKIT() ;
sub PF_DLI() ;
sub PF_ECMA() ;
sub PF_GOSIP() ;
sub PF_HYLINK() ;
sub PF_IMPLINK() ;
sub PF_ISO() ;
sub PF_LAST() ;
sub PF_LAT() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_NS() ;
sub PF_OSI() ;
sub PF_OSINET() ;
sub PF_PUP() ;
sub PF_USER() ;
sub PF_WAN() ;
sub SCM_CONNECT() ;
sub SCM_CREDS() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DONTLINGER() ;
sub SO_FAMILY() ;
sub SO_PASSIFNAME() ;
sub SO_PROTOTYPE() ;
sub SO_STATE() ;
sub SO_USELOOPBACK() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_MAXRT() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub closelog_xs;
sub constant;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub openlog_xs;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub setlocale;
sub setlogmask_xs;
sub sockaddr_family;
sub strftime;
sub syslog_xs;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Tie::Hash::NamedCapture {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub SCALAR;
sub STORE;
sub TIEHASH;
sub _tie_it;
sub flags;
}
package Time::HiRes {
sub alarm($;$) ;
sub clock() ;
sub clock_getres(;$) ;
sub clock_gettime(;$) ;
sub clock_nanosleep($$;$) ;
sub constant($) ;
sub getitimer($) ;
sub gettimeofday() ;
sub lstat(;$) ;
sub nanosleep($) ;
sub setitimer($$;$) ;
sub sleep(;@) ;
sub stat(;$) ;
sub time() ;
sub ualarm($;$) ;
sub usleep($) ;
sub utime($$@) ;
}
package Time::Piece {
sub _crt_gmtime($) ;
sub _crt_localtime($) ;
sub _get_localization() ;
sub _mini_mktime($$$$$$) ;
sub _strftime($$;$) ;
sub _strptime($$$$) ;
sub _tzset() ;
sub blessed($) ;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub isa;
}
package Unicode::Collate {
sub _decompHangul;
sub _derivCE_14;
sub _derivCE_18;
sub _derivCE_20;
sub _derivCE_22;
sub _derivCE_24;
sub _derivCE_32;
sub _derivCE_34;
sub _derivCE_36;
sub _derivCE_38;
sub _derivCE_40;
sub _derivCE_43;
sub _derivCE_8;
sub _derivCE_9;
sub _exists_simple;
sub _fetch_rest;
sub _fetch_simple;
sub _getHexArray;
sub _ignorable_simple;
sub _isIllegal;
sub _isUIdeo;
sub _uideoCE_8;
sub getHST;
sub mk_SortKey;
sub varCE;
sub visualizeSortKey;
}
package Unicode::GCString {
sub DESTROY($) ;
sub _new($$;$) ;
sub as_array($) ;
sub as_scalarref;
sub as_string($;$;$) ;
sub chars($) ;
sub cmp($$;$) ;
sub columns;
sub concat($$;$) ;
sub copy($) ;
sub eos;
sub flag($;$;$) ;
sub item($;$) ;
sub join;
sub lbc($) ;
sub lbcext($) ;
sub lbclass($;$) ;
sub lbclass_ext($;$) ;
sub length($) ;
sub next($;$;$) ;
sub pos($;$) ;
sub substr($$;$;$) ;
}
package Unicode::LineBreak {
sub DESTROY($) ;
sub EAWidths;
sub LBClasses;
sub SOMBOK_VERSION;
sub UNICODE_VERSION;
sub _config;
sub _new($) ;
sub as_hashref;
sub as_scalarref;
sub as_string;
sub break($$) ;
sub break_partial($$) ;
sub breakingRule($$$) ;
sub copy($) ;
sub is_utf8($;$) ;
sub lbrule($$$) ;
sub reset($) ;
sub strsize($$$$$;$) ;
}
package Unicode::LineBreak::SouthEastAsian {
sub supported() ;
}
package Unicode::Normalize {
sub FCC($) ;
sub NFC($) ;
sub NFD($) ;
sub NFKC($) ;
sub NFKD($) ;
sub checkFCC($) ;
sub checkFCD($) ;
sub checkNFC($) ;
sub checkNFD($) ;
sub checkNFKC($) ;
sub checkNFKD($) ;
sub compose($) ;
sub composeContiguous($) ;
sub decompose($;$) ;
sub getCanon($) ;
sub getCombinClass($) ;
sub getCompat($) ;
sub getComposite($$) ;
sub isComp2nd($) ;
sub isComp_Ex($) ;
sub isExclusion($) ;
sub isNFC_MAYBE($) ;
sub isNFC_NO($) ;
sub isNFD_NO($) ;
sub isNFKC_MAYBE($) ;
sub isNFKC_NO($) ;
sub isNFKD_NO($) ;
sub isNonStDecomp($) ;
sub isSingleton($) ;
sub reorder($) ;
sub splitOnLastStarter;
}
package XML::LibXML {
sub AUTOLOAD;
sub DISABLE_THREAD_SUPPORT;
sub HAVE_READER;
sub HAVE_SCHEMAS;
sub HAVE_STRUCT_ERRORS;
sub HAVE_THREAD_SUPPORT;
sub INIT_THREAD_SUPPORT;
sub LIBXML_DOTTED_VERSION;
sub LIBXML_RUNTIME_VERSION;
sub LIBXML_VERSION;
sub _CLONE;
sub _default_catalog;
sub _dump_registry;
sub _end_push;
sub _end_sax_push;
sub _externalEntityLoader;
sub _leaked_nodes;
sub _parse_fh;
sub _parse_file;
sub _parse_html_fh;
sub _parse_html_file;
sub _parse_html_string;
sub _parse_sax_fh;
sub _parse_sax_file;
sub _parse_sax_string;
sub _parse_sax_xml_chunk;
sub _parse_string;
sub _parse_xml_chunk;
sub _processXIncludes;
sub _push;
sub _start_push;
sub decodeFromUTF8;
sub encodeToUTF8;
sub export_GDOME;
sub import_GDOME;
sub load_catalog;
}
package XML::LibXML::Attr {
sub _setNamespace;
sub getNextSibling;
sub getOwnerElement;
sub getParentNode;
sub getPreviousSibling;
sub getValue;
sub isId;
sub name;
sub new;
sub nextSibling;
sub ownerElement;
sub parentElement;
sub previousSibling;
sub serialize;
sub serializeContent;
sub setValue;
sub toString;
sub value;
}
package XML::LibXML::CDATASection {
sub new;
}
package XML::LibXML::Comment {
sub new;
}
package XML::LibXML::Common {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXML::Devel {
sub fix_owner;
sub mem_used;
sub node_from_perl;
sub node_to_perl;
sub refcnt;
sub refcnt_dec;
sub refcnt_inc;
}
package XML::LibXML::Document {
sub URI;
sub _setDocumentElement;
sub _toString;
sub adoptNode;
sub cloneNode;
sub compression;
sub createAttribute;
sub createAttributeNS;
sub createCDATASection;
sub createComment;
sub createDTD;
sub createDocument;
sub createDocumentFragment;
sub createElement;
sub createElementNS;
sub createEntityReference;
sub createExternalSubset;
sub createInternalSubset;
sub createPI;
sub createProcessingInstruction;
sub createRawElement;
sub createRawElementNS;
sub createTextNode;
sub documentElement;
sub documentURI;
sub encoding;
sub externalSubset;
sub getDocumentElement;
sub getElementById;
sub getElementsById;
sub getEncoding;
sub getVersion;
sub importNode;
sub indexElements;
sub internalSubset;
sub is_valid;
sub new;
sub removeExternalSubset;
sub removeInternalSubset;
sub serialize_html;
sub setCompression;
sub setEncoding;
sub setExternalSubset;
sub setInternalSubset;
sub setStandalone;
sub setURI;
sub setVersion;
sub standalone;
sub toFH;
sub toFile;
sub toStringHTML;
sub validate;
sub version;
sub xmlEncoding;
sub xmlStandalone;
sub xmlVersion;
}
package XML::LibXML::DocumentFragment {
sub addNewChild;
sub appendText;
sub appendTextNode;
sub new;
}
package XML::LibXML::Dtd {
sub getPublicId;
sub getSystemId;
sub new;
sub parse_string;
sub parse_uri;
sub publicId;
sub systemId;
}
package XML::LibXML::Element {
sub _getAttribute;
sub _getAttributeNS;
sub _getNamespaceDeclURI;
sub _setAttribute;
sub _setAttributeNS;
sub _setNamespace;
sub addNewChild;
sub appendText;
sub appendTextChild;
sub appendTextNode;
sub blessed($) ;
sub getAttributeNode;
sub getAttributeNodeNS;
sub hasAttribute;
sub hasAttributeNS;
sub new;
sub removeAttribute;
sub removeAttributeNS;
sub removeAttributeNode;
sub setAttributeNode;
sub setAttributeNodeNS;
sub setNamespaceDeclPrefix;
sub setNamespaceDeclURI;
sub tagName;
}
package XML::LibXML::HashTable {
sub DESTROY;
sub new;
}
package XML::LibXML::InputCallback {
sub lib_cleanup_callbacks;
sub lib_init_callbacks;
}
package XML::LibXML::LibError {
sub code;
sub context_and_column;
sub domain;
sub file;
sub int1;
sub int2;
sub level;
sub line;
sub message;
sub num1;
sub num2;
sub str1;
sub str2;
sub str3;
}
package XML::LibXML::Namespace {
sub DESTROY;
sub _isEqual;
sub declaredPrefix;
sub declaredURI;
sub getData;
sub getLocalName;
sub getType;
sub getValue;
sub href;
sub localname;
sub new;
sub nodeType;
sub nodeValue;
sub unique_key;
sub value2;
sub value;
}
package XML::LibXML::Node {
sub DESTROY;
sub _attributes;
sub _childNodes;
sub _find;
sub _findnodes;
sub _getChildrenByTagNameNS;
sub _toStringC14N;
sub addChild;
sub addSibling;
sub appendChild;
sub baseURI;
sub cloneNode;
sub firstChild;
sub firstNonBlankChild;
sub getAttributes;
sub getChildnodes;
sub getData;
sub getFirstChild;
sub getLastChild;
sub getLocalName;
sub getName;
sub getNamespace;
sub getNamespaceURI;
sub getNamespaces;
sub getNextSibling;
sub getOwner;
sub getOwnerDocument;
sub getOwnerElement;
sub getParentNode;
sub getPrefix;
sub getPreviousSibling;
sub getType;
sub getValue;
sub hasAttributes;
sub hasChildNodes;
sub insertAfter;
sub insertBefore;
sub isEqual;
sub isSameNode;
sub lastChild;
sub line_number;
sub localNS;
sub localName;
sub localNamespace;
sub localname;
sub lookupNamespacePrefix;
sub lookupNamespaceURI;
sub namespaceURI;
sub namespaces;
sub nextNonBlankSibling;
sub nextSibling;
sub nodeName;
sub nodePath;
sub nodeType;
sub nodeValue;
sub normalize;
sub ownerDocument;
sub ownerNode;
sub parentNode;
sub prefix;
sub previousNonBlankSibling;
sub previousSibling;
sub removeChild;
sub removeChildNodes;
sub replaceChild;
sub replaceNode;
sub serialize;
sub setBaseURI;
sub setName;
sub setNodeName;
sub setRawName;
sub string_value;
sub textContent;
sub toString;
sub to_literal;
sub to_number;
sub unbindNode;
sub unique_key;
sub unlink;
sub unlinkNode;
}
package XML::LibXML::PI {
sub _setData;
}
package XML::LibXML::ParserContext {
sub DESTROY;
}
package XML::LibXML::Pattern {
sub DESTROY;
sub _compilePattern;
sub matchesNode;
}
package XML::LibXML::Reader {
sub _DESTROY;
sub _close;
sub _getParserProp;
sub _newForDOM;
sub _newForFd;
sub _newForFile;
sub _newForIO;
sub _newForString;
sub _nodePath;
sub _preservePattern;
sub _setParserProp;
sub _setRelaxNG;
sub _setRelaxNGFile;
sub _setXSD;
sub _setXSDFile;
sub attributeCount;
sub baseURI;
sub byteConsumed;
sub columnNumber;
sub copyCurrentNode;
sub depth;
sub document;
sub encoding;
sub finish;
sub getAttribute;
sub getAttributeHash;
sub getAttributeNo;
sub getAttributeNs;
sub hasAttributes;
sub hasValue;
sub isDefault;
sub isEmptyElement;
sub isNamespaceDecl;
sub isValid;
sub lineNumber;
sub localName;
sub lookupNamespace;
sub matchesPattern;
sub moveToAttribute;
sub moveToAttributeNo;
sub moveToAttributeNs;
sub moveToElement;
sub moveToFirstAttribute;
sub moveToNextAttribute;
sub name;
sub namespaceURI;
sub next;
sub nextElement;
sub nextPatternMatch;
sub nextSibling;
sub nextSiblingElement;
sub nodeType;
sub prefix;
sub preserveNode;
sub quoteChar;
sub read;
sub readAttributeValue;
sub readInnerXml;
sub readOuterXml;
sub readState;
sub skipSiblings;
sub standalone;
sub value;
sub xmlLang;
sub xmlVersion;
}
package XML::LibXML::RegExp {
sub DESTROY;
sub _compile;
sub isDeterministic;
sub matches;
}
package XML::LibXML::RelaxNG {
sub DESTROY;
sub parse_buffer;
sub parse_document;
sub parse_location;
sub validate;
}
package XML::LibXML::Schema {
sub DESTROY;
sub parse_buffer;
sub parse_location;
sub validate;
}
package XML::LibXML::Text {
sub appendData;
sub data;
sub deleteData;
sub insertData;
sub new;
sub replaceData;
sub setData;
sub substringData;
}
package XML::LibXML::XPathContext {
sub DESTROY;
sub _find;
sub _findnodes;
sub _free_node_pool;
sub getContextNode;
sub getContextPosition;
sub getContextSize;
sub getVarLookupData;
sub getVarLookupFunc;
sub lookupNs;
sub new;
sub registerFunctionNS;
sub registerNs;
sub registerVarLookupFunc;
sub setContextNode;
sub setContextPosition;
sub setContextSize;
}
package XML::LibXML::XPathExpression {
sub DESTROY;
sub new;
}
package XML::Parser::Expat {
sub DefaultCurrent;
sub Do_External_Parse;
sub ElementIndex;
sub ErrorString;
sub FreeEncoding;
sub GenerateNSName;
sub GetBase;
sub GetCurrentByteIndex;
sub GetCurrentColumnNumber;
sub GetCurrentLineNumber;
sub GetErrorCode;
sub GetSpecifiedAttributeCount;
sub LoadEncoding;
sub OriginalString;
sub ParseDone;
sub ParsePartial;
sub ParseStream;
sub ParseString;
sub ParserCreate;
sub ParserFree;
sub ParserRelease;
sub PositionContext;
sub RecognizedString;
sub SetAttListDeclHandler;
sub SetBase;
sub SetCharacterDataHandler;
sub SetCommentHandler;
sub SetDefaultHandler;
sub SetDoctypeHandler;
sub SetElementDeclHandler;
sub SetEndCdataHandler;
sub SetEndDoctypeHandler;
sub SetEndElementHandler;
sub SetEntityDeclHandler;
sub SetExtEntFinishHandler;
sub SetExternalEntityRefHandler;
sub SetNotationDeclHandler;
sub SetProcessingInstructionHandler;
sub SetStartCdataHandler;
sub SetStartElementHandler;
sub SetUnparsedEntityDeclHandler;
sub SetXMLDeclHandler;
sub SkipUntil;
sub UnsetAllHandlers;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package builtin {
sub blessed($) ;
sub ceil($) ;
sub created_as_number($) ;
sub created_as_string($) ;
sub false() ;
sub floor($) ;
sub import;
sub indexed;
sub is_bool($) ;
sub is_weak($) ;
sub refaddr($) ;
sub reftype($) ;
sub trim;
sub true() ;
sub unweaken($) ;
sub weaken($) ;
}
package bytes {
sub chr(_) ;
sub index($$;$) ;
sub length(_) ;
sub ord(_) ;
sub rindex($$;$) ;
sub substr($$;$$) ;
}
package constant {
sub _make_const(\[$@]) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package netsnmp_oidPtr {
sub DESTROY($) ;
sub append($$) ;
sub append_oid($$) ;
sub clone($) ;
sub get_indexes($) ;
sub length($) ;
sub to_array($) ;
sub to_string($) ;
}
package re {
sub install;
sub is_regexp($) ;
sub optimization($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub _handle;
sub create;
sub detach;
sub equal;
sub error;
sub get_stack_size;
sub is_detached;
sub is_joinable;
sub is_running;
sub join;
sub kill;
sub list;
sub new;
sub object;
sub self;
sub set_stack_size;
sub set_thread_exit_only;
sub tid;
sub wantarray;
sub yield;
}
package threads::shared {
sub _id(\[$@%]) ;
sub _refcnt(\[$@%]) ;
sub bless($;$) ;
sub blessed($) ;
sub cond_broadcast(\[$@%]) ;
sub cond_signal(\[$@%]) ;
sub cond_timedwait(\[$@%]$;\[$@%]) ;
sub cond_wait(\[$@%];\[$@%]) ;
sub is_shared(\[$@%]) ;
sub refaddr($) ;
sub reftype($) ;
sub share(\[$@%]) ;
}
package threads::shared::tie {
sub EXISTS;
sub EXTEND;
sub FIRSTKEY;
sub NEXTKEY;
sub POP;
sub PUSH;
sub SHIFT;
sub STORESIZE;
sub UNSHIFT;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
